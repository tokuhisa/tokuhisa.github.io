{"meta":{"title":"fumiaki.xyz","subtitle":null,"description":null,"author":"Tokuhisa, Fumiaki","url":"http://fumiaki.xyz"},"pages":[{"title":"about","date":"2016-09-18T16:22:49.000Z","updated":"2018-06-30T13:54:10.933Z","comments":true,"path":"about/index.html","permalink":"http://fumiaki.xyz/about/index.html","excerpt":"","text":""}],"posts":[{"title":"チャットボット開発 その１ 環境構築","slug":"chatbot-development-001","date":"2019-02-04T12:20:00.000Z","updated":"2019-02-04T14:38:30.699Z","comments":true,"path":"chatbot-development-001/","link":"","permalink":"http://fumiaki.xyz/chatbot-development-001/","excerpt":"","text":"はじめにチャットボット(Chatbot)開発はじめました！ 学生のころからたまに対話アプリっぽいものは作ってましたが、チャットボットは作ったことないなと思い作ることにしました。 目標は、以下の3つで、モチベーションの続く限りやっていこうと思います。 自分が使う便利な機能を開発 誰でも使えるよう公開 ちょっとスキルアップ 今回は、環境構築のみなので自分の備忘録程度の記事になります。 Azure Bot Serviceチャットボットの実行環境としては、Azure Bot Serviceを使用することにしました。理由は、以下の2点です。 Facebook Messenger と Slack への接続が簡単らしい Bot Service自体はシンプル 2つ目の理由が結構重要で、いろいろ試したいので、素の状態がシンプルな方が都合が良いと考えました。意図理解をする場合も自分で作ってみたり、LUIS等のサービスに繋げてみたりしたいと思います。 チャットボットの新規作成Azure Bot Service を使用してボットを作成する 上記ページの通りにやれば、ボットを作れるはずなのですが、なぜか自分は、App Service Plan の Location 選択でどこを選択してもエラーになる現象に遭遇しました。 一旦、App Service で適当な Web Appを作って、その際にできた App Service Plan を Bot Service の新規作成時に使用すると問題なく作れました。うーん、謎な挙動ですね。 Visual Studio で開発Bot Service で作成したボットは、Visual Studio を使ってローカルで開発することができます。 作成したボットのコードをダウンロードするには、Bot Service のページで対象のボットを選択し、ビルドのページの「zip ファイルをダウンロード」のボタンをクリックするとプロジェクトのzipファイルが手に入ります。あとは、そのzipファイルをローカルで展開して、Visual Studio で開けば準備完了です。 F5 で実行すれば、ローカルでボットが動きます。お手軽ですね。 エミュレーターでテストエミュレーターを使用したデバッグ 実行中のボットは上記ページの Bot Framework Emulator を使うとテストができます。Bot Framework Emulator で対象のボットの.botファイルを開いて、ローカルで動いている development のボットとサーバで動いている production のボットをテストすることができます。 デプロイデプロイの仕方は、Bot Serviceからダウンロードしたプロジェクトの README.md に詳細が記載されています。Visual Studio上で、デプロイ画面を開いて操作するだけなので楽々でした。","categories":[{"name":"Diary","slug":"Diary","permalink":"http://fumiaki.xyz/categories/Diary/"},{"name":"Chatbot","slug":"Diary/Chatbot","permalink":"http://fumiaki.xyz/categories/Diary/Chatbot/"}],"tags":[{"name":"Chatbot","slug":"Chatbot","permalink":"http://fumiaki.xyz/tags/Chatbot/"}]},{"title":"ROSのアプリ開発環境セットアップ","slug":"ros-app-development-setup","date":"2016-10-10T13:08:00.000Z","updated":"2018-06-30T13:54:10.933Z","comments":true,"path":"ros-app-development-setup/","link":"","permalink":"http://fumiaki.xyz/ros-app-development-setup/","excerpt":"","text":"はじめにRealSenseを使ったアプリケーションを開発するために，ROSのセットアップを行いました．普段利用しているMacのOS X El Capitan上で開発するために，VMwareでUbuntuの仮想環境を構築し，CLionで開発することにしました． VMwareセットアップUbuntuをインストール今回は，ROS Indigoを使うので，サポートしているUbuntu 14.04をインストール． open-vm-toolsのインストール以下のコマンドを実行して，open-vm-toolsをインストール．画面をウィンドウサイズにあわせることなどができるようになり便利． 123sudo apt-get updatesudo apt-get install -y open-vm-toolssudo apt-get install -y open-vm-tools-desktop キーボード設定以下のコマンドでmozcをインストール 1sudo apt-get install ibus-mozc 使用する入力ソースをMozcに変更 Macのスペース横のEisuキーとHiraganaキーで日本語オン・オフを切り替えるために，Mozcキー設定を変更しました．モードが入力変換中・変換中・入力文字なしで入力キーがEisuのときIMEを無効化，モードが直接入力で入力キーがHiraganaのときIMEを有効化します．同じモード・入力キーの組み合わせ設定が既に存在してる場合は，上書きしてください． VMwareのキーマッピングの設定を変更 ROSのセットアップROS Indigo をインストール．基本的にはwikiをそのまま利用． 1234567891011121314151617sudo apt-get install -y chronysudo ntpdate -q ntp.ubuntu.comsudo sh -c &apos;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&apos;sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116sudo apt-get updatesudo apt-get install -y ros-indigo-desktop-fullsudo rosdep initrosdep updateecho &quot;source /opt/ros/indigo/setup.bash&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcsudo apt-get install -y python-rosinstallmkdir -p ~/catkin_ws/srccd ~/catkin_ws/srccatkin_init_workspacecd ~/catkin_wscatkin_makeecho &quot;source ~/catkin_ws/devel/setup.bash&quot; &gt;&gt; ~/.bashrc ROSの環境変数を設定．他のマシンでRealSenseを動かしてるので，ちゃんと設定する必要があります． 123echo &quot;export ROS_MASTER_URI=http://192.168.179.15:11311/&quot; &gt;&gt; ~/.bashrcecho &quot;export ROS_HOSTNAME=192.168.65.133&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc 上記コマンドの192.168.179.15がroscoreが動いてるマシンのIPアドレス，192.168.65.133が仮想環境に割り当てられているIPアドレスになります． 共有フォルダ設定~/catkin_ws/srcフォルダにOS XからアクセスしてGit使ったりしたかったので，共有フォルダの設定を行いました．自分の環境だと，VMwareの共有フォルダ機能が動作しなかったため，Sambaを使いました． Sambaのパスワードを設定しないとOS XのFinderからアクセスできなかったので，以下のコマンドでパスワードを設定． 1sudo smbpasswd -a &lt;ユーザ名&gt; あとは，共有したいフォルダを右クリックしてプロパティから共有の設定する． CLionセットアップCLionは，使えたら使おっかなーと思ってセットアップしましたが，何も困難なことなく動作しました．catkin_create_pkg で生成したディレクトリをそのまま読み込めば，ビルドもデバッグを可能です．以下は，ブレークポイントを使ったデバッグをしたときの画面です． 失敗編この節は，セットアップの失敗記録です． OS X でROSビルドの時点でかなり困難でした．なんとかビルドできましたが，実行時にエラーが出たので断念．各パッケージごとのエラーに対処していくのは現実的ではないと判断しました… VirtualBoxでUbuntuとROS3Dアクセラレーションを有効にするとrvizはエラーが発生し，3Dアクセラレーションを無効にするとrvizが重すぎるので断念しました． DockerでUbuntuとROSSSHのX11転送機能を使ってrvizの画面を表示しようとしたが，エラーが出たので断念．","categories":[{"name":"Diary","slug":"Diary","permalink":"http://fumiaki.xyz/categories/Diary/"},{"name":"ROS","slug":"Diary/ROS","permalink":"http://fumiaki.xyz/categories/Diary/ROS/"}],"tags":[{"name":"ROS","slug":"ROS","permalink":"http://fumiaki.xyz/tags/ROS/"}]},{"title":"Intel の RealSense Robotic Development Kit を買った","slug":"realsense-robotic-devkit-setup","date":"2016-09-28T15:44:21.000Z","updated":"2018-06-30T13:54:10.918Z","comments":true,"path":"realsense-robotic-devkit-setup/","link":"","permalink":"http://fumiaki.xyz/realsense-robotic-devkit-setup/","excerpt":"","text":"はじめに標題の通り，Intel の RealSense Robotic Development Kit を買いました．新しいおもちゃだ！わーい！RealSense Robotic Development Kitは，ボードとRealSense(R200)がセットになったKitです．ただし，現在(2016年9月)のこのR200は一つ前のモデルのようです． セットアップ基本的には，チュートリアルを見ながらセットアップを行いました．セットアップには，有線マウス・キーボード・USBメモリが必要です(amazon の prime now で注文したら30分で届いてびびった)． チュートリアルではlibrealsenseの古いバージョン(v0.9.2)を使っていたので，そこだけ新しいバージョン(v1.9.7)に変更しました． 1git checkout tags/v1.9.7 作業時間は3時間くらいですが，ほとんどがダウンロード時間なので，ネットワーク環境が良ければもっと速く終わると思います． 動作確認librealsense/bin/cpp-capture を動かして動作確認しました．ちゃんと動いてそうですね．Kitだと，環境構築に躓く心配が少ないのでいいですね． 計画むかしむかしスマホで撮った画像で特定物体認識アプリ作って遊んだりしたので，その延長的な感じで遊ぼうと思います．とりあえず，特徴量を抽出する方法を調べる予定．","categories":[{"name":"Diary","slug":"Diary","permalink":"http://fumiaki.xyz/categories/Diary/"},{"name":"RealSense","slug":"Diary/RealSense","permalink":"http://fumiaki.xyz/categories/Diary/RealSense/"}],"tags":[{"name":"RealSense","slug":"RealSense","permalink":"http://fumiaki.xyz/tags/RealSense/"}]},{"title":"なめろうとさんが焼きを作った","slug":"namerou-and-sanga-yaki","date":"2016-09-19T12:37:09.000Z","updated":"2018-06-30T13:54:10.918Z","comments":true,"path":"namerou-and-sanga-yaki/","link":"","permalink":"http://fumiaki.xyz/namerou-and-sanga-yaki/","excerpt":"","text":"はじめにスーパーで刺身を買ってきて，なめろうとさんが焼きを作りました．作業時間は30分くらいでした． 材料123456789101112なめろうの材料: - 刺身：今回は，まぐろとサーモンとイカ - 刺身のつまとけん：大根，人参，きゅうり - 大葉 - 小ねぎ - ごま - にんにく醤油につけてたにんにく - ゆずの村 - 味噌：今回は八丁味噌(家にこれしかなかった)使ったけど，ちょっと失敗だったさんが焼きの材料: - 作ったなめろう - 大葉 手順なめろう基本的に材料を全部たたくだけ．ゆずの村と味噌を加える前のなめろうは以下． これに八丁味噌を加えすぎた &amp; そもそも八丁味噌じゃない味噌の方が良さそうということで，さんが焼きを多めに作ることにした(焼けばなんとかなるやろの精神)． さんが焼き作ったなめろうを大葉の上に置いて焼いた．作ったなめろうを全部使えば，さんが焼きは4個作れる．今回は3個つくった． 結果このようになりました．さんが焼きを多めに作って大正解！！なめろうは味が濃すぎた．ごまを入れると美味しいという知見を得た．","categories":[{"name":"Diary","slug":"Diary","permalink":"http://fumiaki.xyz/categories/Diary/"},{"name":"料理","slug":"Diary/料理","permalink":"http://fumiaki.xyz/categories/Diary/料理/"}],"tags":[{"name":"料理","slug":"料理","permalink":"http://fumiaki.xyz/tags/料理/"}]},{"title":"JupyterLabの拡張機能を作ってみた","slug":"jupyterlab-sample-extension","date":"2016-09-19T01:22:35.000Z","updated":"2018-06-30T13:54:10.918Z","comments":true,"path":"jupyterlab-sample-extension/","link":"","permalink":"http://fumiaki.xyz/jupyterlab-sample-extension/","excerpt":"","text":"はじめにJupyterLabに拡張機能の仕組みが提供されたようなので，試しに拡張機能を作ってみました．まだ安定版ではないようなので，この記事の内容は今後不正確になる可能性が高いです． JupyterLabについてJupyterLabは，Jupyter Notebookをベースに拡張したものです．Jupyter Notebookとの違いとしては，以下のような画面の分割機能やタブ機能があります． 普段は，Jupyter Notebookを使っており，そろそろJupyterLabに乗り換えたいなーと思ってます． JupyterLabの拡張機能について拡張機能の仕組みは，できてから日が浅いようでドキュメントもほとんどないです．今回は，以下のページを参考にしました． JupyterLab Tutorial Documentation : JupyterLabの一般的なチュートリアル JupyterLab Extension Builder : JupyterLabの拡張機能を作るツール Jupyter Widgets JupyterLab Extension : JupyterLabの拡張機能のプロジェクトは，これ以外見当たらなかった Enable Third Party Extensions #814 拡張機能作成の全体の流れまずは，拡張機能のプロジェクトディレクトリを作ります．今回は，samplelabextensionという名前で作ります． 123mkdir samplelabextensioncd samplelabextensionnpm init プロジェクトに必要なライブラリをインストール 123456npm install --save jupyterlabnpm install --save phosphornpm install --save-dev jupyterlab-extension-buildernpm install --save-dev rimrafnpm install --save-dev typedocnpm install --save-dev typescript 次に，samplelabextension/src ディレクトリ下に拡張機能のスクリプトを書きます．今回は，独自のhtmlを表示する拡張機能とし，typescriptで書きました． samplelabextension/src/tsconfig.json : typescriptの設定 samplelabextension/src/plugin.ts : 拡張機能のエントリーポイントとなるスクリプト samplelabextension/src/html.ts : 表示するhtml このスクリプトは後でjavascriptに変換して samplelabextension/lib ディレクトリ下に保存されます． samplelabextension/scripts/buildExtension.js を使って， 拡張機能のスクリプトをビルドします． 123456789var path = require(&apos;path&apos;);var buildExtension = require(&apos;jupyterlab-extension-builder&apos;).buildExtension;buildExtension(&#123; name: &apos;samplelabextension&apos;, entry: &apos;./lib/plugin&apos;, outputDir : &apos;./samplelabextension/static&apos;&#125;); あとは，package.jsonのscriptsに色々書いたり， 1234567891011\"scripts\": &#123; \"clean\": \"rimraf docs &amp;&amp; rimraf lib &amp;&amp; rimraf samplelabextension/static\", \"build:src\": \"tsc --project src\", \"build:extension\": \"node scripts/buildExtension.js\", \"build\": \"npm run build:src &amp;&amp; npm run build:extension\", \"example:browser\": \"cd examples/browser &amp;&amp; npm run update &amp;&amp; npm run build\", \"example:node\": \"cd examples/node &amp;&amp; npm install\", \"build:examples\": \"npm run example:browser &amp;&amp; npm run example:node\", \"docs\": \"typedoc --mode file --module commonjs --excludeNotExported --target es5 --moduleResolution node --out docs/ src\", \"prepublish\": \"npm run build\" &#125;, setup.pyに色々書いたり，MANIFEST.inを書いたり，samplelabextension/samplelabextension/__init__.py を書いたり，samplelabextension/samplelabextension/_version.py を書いたりすれば終わりです． ビルドして， 12npm run buildpython setup.py install 拡張機能としてインストールすれば，使えるようになります． 12jupyter labextension install --py samplelabextensionjupyter labextension enable samplelabextension --py JupyterLabを起動すれば，新たなCommandsが追加され，独自のhtmlを表示できています．","categories":[{"name":"Diary","slug":"Diary","permalink":"http://fumiaki.xyz/categories/Diary/"},{"name":"jupyterlab","slug":"Diary/jupyterlab","permalink":"http://fumiaki.xyz/categories/Diary/jupyterlab/"}],"tags":[{"name":"jupyterlab","slug":"jupyterlab","permalink":"http://fumiaki.xyz/tags/jupyterlab/"}]},{"title":"Hello World","slug":"hello-world","date":"2015-11-11T12:16:33.000Z","updated":"2018-06-30T13:54:10.918Z","comments":true,"path":"hello-world/","link":"","permalink":"http://fumiaki.xyz/hello-world/","excerpt":"","text":"HugoからHexoに変えた Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 数式$\\pi = 3$ こんにちは世界 $\\sum$$$a = b + c$$.","categories":[{"name":"Diary","slug":"Diary","permalink":"http://fumiaki.xyz/categories/Diary/"},{"name":"hexo","slug":"Diary/hexo","permalink":"http://fumiaki.xyz/categories/Diary/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://fumiaki.xyz/tags/hexo/"}]}]}